USE sakila;
-- List the number of films per category
SELECT 
    c.name AS category, 
    COUNT(f.film_id) AS num_films
FROM 
    category c
JOIN 
    film_category fc ON c.category_id = fc.category_id
JOIN 
    film f ON fc.film_id = f.film_id
GROUP BY 
    c.name;


-- Retrieve the store ID, city, and country for each store
SELECT 
    s.store_id, 
    ci.city, 
    co.country
FROM 
    store s
JOIN 
    address a ON s.address_id = a.address_id
JOIN 
    city ci ON a.city_id = ci.city_id
JOIN 
    country co ON ci.country_id = co.country_id;



-- Calculate the total revenue generated by each store in dollars
SELECT 
    s.store_id, 
    SUM(p.amount) AS total_revenue
FROM 
    store s
JOIN 
    inventory i ON s.store_id = i.store_id
JOIN 
    rental r ON i.inventory_id = r.inventory_id
JOIN 
    payment p ON r.rental_id = p.rental_id
GROUP BY 
    s.store_id;


-- Determine the average running time of films for each category
SELECT 
    c.name AS category, 
    AVG(f.length) AS avg_running_time
FROM 
    category c
JOIN 
    film_category fc ON c.category_id = fc.category_id
JOIN 
    film f ON fc.film_id = f.film_id
GROUP BY 
    c.name;


-- Identify the film categories with the longest average running time
SELECT 
    c.name AS category, 
    AVG(f.length) AS avg_running_time
FROM 
    category c
JOIN 
    film_category fc ON c.category_id = fc.category_id
JOIN 
    film f ON fc.film_id = f.film_id
GROUP BY 
    c.name
ORDER BY 
    avg_running_time DESC;


-- Display the top 10 most frequently rented movies in descending order
SELECT 
    f.title, 
    COUNT(r.rental_id) AS rental_count
FROM 
    rental r
JOIN 
    inventory i ON r.inventory_id = i.inventory_id
JOIN 
    film f ON i.film_id = f.film_id
GROUP BY 
    f.title
ORDER BY 
    rental_count DESC
LIMIT 10;


-- Determine if "Academy Dinosaur" can be rented from Store 1
SELECT 
    f.title, 
    i.store_id, 
    CASE 
        WHEN i.inventory_id IS NOT NULL THEN 'Available'
        ELSE 'Not Available' 
    END AS availability_status
FROM 
    film f
JOIN 
    inventory i ON f.film_id = i.film_id
WHERE 
    f.title = 'Academy Dinosaur' AND i.store_id = 1;


-- Provide a list of all distinct film titles with their availability status
SELECT 
    f.title, 
    IFNULL(
        CASE 
            WHEN i.inventory_id IS NULL THEN 'Not Available' 
            ELSE 'Available' 
        END, 'Not Available') AS availability_status
FROM 
    film f
LEFT JOIN 
    inventory i ON f.film_id = i.film_id;


